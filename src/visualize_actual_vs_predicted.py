import os
import pandas as pd
import matplotlib.pyplot as plt

OUTPUT_DIR = "output"
PLOTS_DIR = os.path.join(OUTPUT_DIR, "plots")
os.makedirs(PLOTS_DIR, exist_ok=True)

def visualize_actual_vs_predicted():
    print("üìä Visualizing Actual vs Predicted Solar Power for each city...")

    # Collect all comparison CSVs generated by model_trainer.py
    comparison_files = [f for f in os.listdir(OUTPUT_DIR) if f.endswith("_comparison.csv")]

    if not comparison_files:
        print("‚ö†Ô∏è No comparison files found. Run model_trainer.py first.")
        return

    for file in comparison_files:
        try:
            df = pd.read_csv(os.path.join(OUTPUT_DIR, file))
            
            # Detect which power type (DC or AC)
            label = "DC" if "DC" in file else "AC"
            model_name = file.replace("_comparison.csv", "")
            
            # If city info is available, plot per city
            if "CITY" in df.columns:
                for city in df["CITY"].unique():
                    city_df = df[df["CITY"] == city]
                    plt.figure(figsize=(8, 5))
                    plt.plot(city_df["Actual"], label="Actual", color="green", marker="o")
                    plt.plot(city_df["Predicted"], label="Predicted", color="orange", marker="x")
                    plt.title(f"{model_name} - {city} ({label} Power)")
                    plt.xlabel("Samples")
                    plt.ylabel("Power (kW)")
                    plt.legend()
                    plt.grid(True)
                    plt.tight_layout()
                    save_path = f"{PLOTS_DIR}/{model_name}_{city}_{label}_Comparison.png"
                    plt.savefig(save_path)
                    plt.close()
                    print(f"‚úÖ Saved plot ‚Üí {save_path}")
            else:
                # If no CITY column, just plot overall comparison
                plt.figure(figsize=(8, 5))
                plt.plot(df["Actual"], label="Actual", color="green", marker="o")
                plt.plot(df["Predicted"], label="Predicted", color="orange", marker="x")
                plt.title(f"{model_name} ({label} Power)")
                plt.xlabel("Samples")
                plt.ylabel("Power (kW)")
                plt.legend()
                plt.grid(True)
                plt.tight_layout()
                save_path = f"{PLOTS_DIR}/{model_name}_{label}_Comparison.png"
                plt.savefig(save_path)
                plt.close()
                print(f"‚úÖ Saved plot ‚Üí {save_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to plot {file}: {e}")

    print(f"\nüéØ All graphs saved to: {PLOTS_DIR}/")

if __name__ == "__main__":
    visualize_actual_vs_predicted()
